import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Initialize Supabase client with service role for admin access
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL || '',
  process.env.SUPABASE_SERVICE_ROLE_KEY || ''
);

export async function POST(req: NextRequest) {
  try {
    const { userId, prompt, imageBase64 } = await req.json();
    
    if (!userId || !prompt || !imageBase64) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Check if user has enough credits
    const { data: userData, error: userError } = await supabaseAdmin
      .from('users')
      .select('credits')
      .eq('id', userId)
      .single();

    if (userError) {
      return NextResponse.json(
        { error: 'Failed to retrieve user data' },
        { status: 500 }
      );
    }

    if (!userData || userData.credits < 1) {
      return NextResponse.json(
        { error: 'Insufficient credits' },
        { status: 402 }
      );
    }

    // In a real implementation, this would call an AI service API
    // For now, we'll just simulate the response with a delay

    // Mock generated images (in a real implementation, these would be generated by the AI service)
    const generatedImageBase64 = imageBase64; // Placeholder, would be replaced with real generated image
    const similarImageBase64 = imageBase64; // Placeholder, would be replaced with real similar image

    // Deduct a credit from the user's account
    const { error: updateError } = await supabaseAdmin
      .from('users')
      .update({ credits: userData.credits - 1 })
      .eq('id', userId);

    if (updateError) {
      return NextResponse.json(
        { error: 'Failed to update user credits' },
        { status: 500 }
      );
    }

    // Record the generation in the database
    await supabaseAdmin.from('generations').insert({
      user_id: userId,
      prompt,
      original_image_url: 'placeholder_url', // In a real implementation, we would store these in storage
      generated_image_url: 'placeholder_url',
      similar_image_url: 'placeholder_url',
      status: 'completed',
    });

    // Return the generated images
    return NextResponse.json({
      success: true,
      generatedImage: generatedImageBase64,
      similarImage: similarImageBase64,
      remainingCredits: userData.credits - 1,
    });
  } catch (error) {
    console.error('Error generating image:', error);
    return NextResponse.json(
      { error: 'Failed to generate image' },
      { status: 500 }
    );
  }
} 